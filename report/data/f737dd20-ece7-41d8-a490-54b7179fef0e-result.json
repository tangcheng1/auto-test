{"name": "test_ridercheckuseramount[caseinfo0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_case.ridercheckusername_test.Testrider object at 0x107df4730>\ncaseinfo = {'name': '判断金额是否足够，同时计算出余额和优惠金额的扣除明细', 'request': {'headers': {'Content-Type': 'application/json', 'User-Agent': 'Mozi...t', 'params': {'id': '$id', 'orderAmt': '20', 'userName': '13720235230'}, 'path': '/api/rider/check/user/amount', ...}}\n\n    @allure.story('判断金额是否足够，同时计算出余额和优惠金额的扣除明细')\n    @pytest.mark.dependency()\n    @pytest.mark.parametrize(\"caseinfo\", YamlUtil().yaml_read(\"data_yaml\", \"ridercheckuseramount.yaml\"))\n    def test_ridercheckuseramount(self,caseinfo):\n        # 获取yaml的请求数据request\n        value = caseinfo['request']\n        # 更新yaml文件里面的带$值\n        extract = YamlUtil().yaml_read(\"data_yaml\", \"extract.yaml\")\n        yaml_data = YamlUtil.extractdata_render_params(extract,value)\n        # files = value[\"files\"] if \"files\" in test_case else None\n        # extract = value[\"extract\"] if \"extract\" in value else None\n        validate = value[\"validate\"] if \"validate\" in value else None\n        response = Utils.sendRequest(caseinfo['name'],yaml_data['method'], yaml_data['path'], yaml_data['params'], yaml_data['headers'])\n        # if \"id\" in str(response):\n        #     YamlUtil().yaml_write({\"id\": response[\"data\"][\"id\"]}, \"data_yaml\", \"extract.yaml\")\n        if validate:\n>           Utils.validate(response, validate)\n\ntest_case/ridercheckusername_test.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = {'code': '30003', 'message': '用户钱包金额不够，请充值', 'success': False}\nvalidate = [{'equal_to': {'$.code': 1}}]\n\n    @staticmethod\n    def validate(response, validate: list):\n        for val in validate:\n            for key, item in val.items():\n                for key_json_path, item_expect in item.items():\n                    item_expect = str(item_expect)\n                    logger.info(f\"预期结果的值是{item_expect}\")\n                    actual_val = jsonpath.jsonpath(response, key_json_path)[0]\n                    logger.info(f\"获取真实值是{actual_val}\")\n                    if key == \"equal_to\":\n>                       assert actual_val == item_expect\nE                       AssertionError\n\ntools/base_requests.py:70: AssertionError"}, "attachments": [{"name": "log", "source": "13add639-9b6f-4f03-addf-55127bc899ae-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'name': '判断金额是否足够，同时计算出余额和优惠金额的扣除明细', 'request': {'method': 'post', 'path': '/api/rider/check/user/amount', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (HTML, like Gecko) \"\"Chrome/54.0.2840.99 Safari/537.36', 'deviceId': '1254', 'Content-Type': 'application/json', 'id': '$id', 'token': '$token'}, 'params': {'id': '$id', 'orderAmt': '20', 'userName': '13720235230'}, 'validate': [{'equal_to': {'$.code': 1}}]}}"}], "start": 1652241761534, "stop": 1652241761670, "uuid": "e1c65077-9c08-413e-9b19-4b5e5da94717", "historyId": "8e786e49c334555dd7a60b0e262b2cf4", "testCaseId": "8b87b13222a59fe43d77ef51e36c4a8f", "fullName": "test_case.ridercheckusername_test.Testrider#test_ridercheckuseramount", "labels": [{"name": "story", "value": "判断金额是否足够，同时计算出余额和优惠金额的扣除明细"}, {"name": "tag", "value": "dependency"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "ridercheckusername_test"}, {"name": "subSuite", "value": "Testrider"}, {"name": "host", "value": "xudeMac-mini.local"}, {"name": "thread", "value": "47267-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.ridercheckusername_test"}]}
{"name": "test_login[caseinfo0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_case.ridercheckusername_test.Testridercheckusername object at 0x106166e80>\ncaseinfo = {'name': '检查用户手机号，查询用户昵称信息', 'request': {'headers': {'Content-Type': 'application/json', 'User-Agent': 'Mozilla/5.0 (W... 'token': '$token'}, 'method': 'get', 'params': {'userName': '13720235230'}, 'path': '/api/rider/check/username', ...}}\n\n    @allure.story('检查用户手机号，查询用户昵称信息')\n    @pytest.mark.parametrize(\"caseinfo\", YamlUtil().yaml_read(\"data_yaml\", \"ridercheckusername.yaml\"))\n    def test_login(self, caseinfo):\n        # 获取ymal\n        value = caseinfo['request']\n        # 更新需要参数化的万能验证码，完成接口关联\n        # value['headers']['token'] = YamlUtil().yaml_read(\"data_yaml\", \"extract.yaml\")[\"token\"]\n        extract = YamlUtil().yaml_read(\"data_yaml\", \"extract.yaml\")\n        yaml_data = YamlUtil.extractdata_render_params(extract,value)\n        body = yaml_data['params']\n        # files = value[\"files\"] if \"files\" in test_case else None\n        # extract = value[\"extract\"] if \"extract\" in value else None\n        validate = value[\"validate\"] if \"validate\" in value else None\n        response = Utils.sendRequest(caseinfo['name'],value['method'], value['path'], body, value['headers'])\n        if validate:\n            # logger.info(f\"--预期验证的数据---\\n{validate}\")\n>           Utils.validate(response, validate)\n\ntest_case/ridercheckusername_test.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = {'code': '403', 'message': 'token验证失败,请重新登录'}\nvalidate = [{'equal_to': {'$.code': 1}}]\n\n    @staticmethod\n    def validate(response, validate: list):\n        for val in validate:\n            for key, item in val.items():\n                for key_json_path, item_expect in item.items():\n                    item_expect =str(item_expect)\n                    logger.info(f\" 预期结果的值是{item_expect}\")\n                    actual_val = jsonpath.jsonpath(response, key_json_path)[0]\n                    logger.info(f\" 获取真实值是{actual_val}\")\n                    if key == \"equal_to\":\n>                       assert actual_val == item_expect\nE                       AssertionError\n\ntools/base_requests.py:71: AssertionError"}, "attachments": [{"name": "log", "source": "c4e90cf0-1e15-4077-a720-8bbcb506940a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'name': '检查用户手机号，查询用户昵称信息', 'request': {'method': 'get', 'path': '/api/rider/check/username', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (HTML, like Gecko) \"\"Chrome/54.0.2840.99 Safari/537.36', 'deviceId': '1254', 'Content-Type': 'application/json', 'token': '$token'}, 'params': {'userName': '13720235230'}, 'validate': [{'equal_to': {'$.code': 1}}]}}"}], "start": 1652089199300, "stop": 1652089199422, "uuid": "225ebff6-ffc6-47d6-bff3-4b6152174d5a", "historyId": "2405c397fae525036306e8b3bef158eb", "testCaseId": "b2582d423c4cd6fd1883ae7d682ac788", "fullName": "test_case.ridercheckusername_test.Testridercheckusername#test_login", "labels": [{"name": "story", "value": "检查用户手机号，查询用户昵称信息"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "ridercheckusername_test"}, {"name": "subSuite", "value": "Testridercheckusername"}, {"name": "host", "value": "xudeMac-mini.local"}, {"name": "thread", "value": "25269-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.ridercheckusername_test"}]}
{"name": "骑手登录接口", "status": "broken", "statusDetails": {"message": "TypeError: Object of type Response is not JSON serializable", "trace": "self = <test_case.login_test.Testwork object at 0x1065bd400>\ncaseinfo = {'name': '骑手登录', 'request': {'headers': {'Content-Type': 'application/json', 'User-Agent': 'Mozilla/5.0 (Windows NT 10...4'}, 'method': 'post', 'params': {'smsCode': '293279', 'userName': '15400010001'}, 'path': '/api/rider/smscode/login'}}\n\n    @allure.story('骑手登录接口')\n    @allure.title('骑手登录接口')\n    @pytest.mark.parametrize(\"caseinfo\", YamlUtil().yaml_read(\"data\", \"login.yaml\"))\n    def test_login(self, caseinfo):\n        # 获取ymal\n        value = assignment_yamlparams(caseinfo['request'])\n        # 更新需要参数化的万能验证码，完成接口关联\n        value['params']['smsCode'] = YamlUtil().yaml_read(\"data\", \"extract.yaml\")[\"almighty_code\"]\n        body= value['params']\n        # value['params']['smsCode']= almighty_code\n        # path = caseinfo['request']['path']\n        # method = caseinfo['request']['method']\n        # data = caseinfo['request']['params']\n        # headers = caseinfo['request']['headers']\n        # 拼接域名和path\n        url = URL + value['path']\n>       response = sendRequest(value['method'], url ,body, value['headers'])\n\ntest_case/login_test.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/base_requests.py:57: in sendRequest\n    logger.info(\"返回的body ==>> {}\".format(json.dumps(rep, indent=4, ensure_ascii=False)))\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:234: in dumps\n    return cls(\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/encoder.py:201: in encode\n    chunks = list(chunks)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/encoder.py:438: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x106607c40>, o = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/encoder.py:179: TypeError"}, "attachments": [{"name": "log", "source": "41e80f71-03b4-48c8-b518-782e121cd644-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'name': '骑手登录', 'request': {'method': 'post', 'path': '/api/rider/smscode/login', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (HTML, like Gecko) \"\"Chrome/54.0.2840.99 Safari/537.36', 'deviceId': '1254', 'Content-Type': 'application/json'}, 'params': {'smsCode': 'none', 'userName': '15400010001'}}}"}], "start": 1651821442839, "stop": 1651821442987, "uuid": "19875fa4-00d6-4e2c-8d8e-695e8583c494", "historyId": "c6fddab3a9f3de76ae0f2b806da5cec3", "testCaseId": "bc1dd6bc210821e278e3916b864b3013", "fullName": "test_case.login_test.Testwork#test_login", "labels": [{"name": "story", "value": "骑手登录接口"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "Testwork"}, {"name": "host", "value": "xudeMac-mini.local"}, {"name": "thread", "value": "16899-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.login_test"}]}